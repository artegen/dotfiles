{
  /*
       // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
       // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
       // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
       // Example:
       "Print to console": {
          "prefix": "log",
          "body": [
              "console.log('$1');",
              "$2"
          ],
          "description": "Log output to console"
      }
  */
  /* React.js
  */
  "rducS": {
    "prefix": "rducS",
    "body": [
      "export const ${1: name } = (state = ${3:initialState}, action = {}) =>",
      "  action.type === ${2:TYPE} ? action.payload.$1 : state;$0"
    ],
    "description": "One type "
  },
  "rducM": {
    "prefix": "rducM",
    "body": [
      "export default (state = ${1:initialState}, action = {}) => {",
      "  switch (action.type) {",
      "    case '${3: TYPE }':",
      "      return $5;",
      "    case '${4: TYPE }':",
      "      return $6;$0",
      "    default:",
      "      return state;",
      "  }",
      "};"
    ],
    "description": "2+ types "
  },
  "mapState": {
    "prefix": "mapState",
    "body": [
      "const mapState = ({ ${1: prop },$0 ...state }) => ({",
      "  $1,",
      "});"
    ],
    "description": "A Redux mapState function"
  },
  "mapDispatch": {
    "prefix": "mapDispatch",
    "body": [
      "const mapDispatch = (dispatch, ownProps) => {",
      "  return {",
      "    ${1:dispatch}: () => {",
      "      dispatch(${2:actionCreator})",
      "    }",
      "  }",
      "}"
    ],
    "description": "A Redux mapDispatch function"
  },
  "connect": {
    "prefix": "cont",
    "body": ["export default connect(mapState, mapDispatch)(${1:component})"],
    "description": "A Redux connect function"
  },
  "reactFunctionalExportComponent": {
    "prefix": "rfe",
    "body": [
      "import React from 'react'",
      "",
      "export default ({ ${1:name}, $2 }) => (",
      "  <div>",
      "    $0",
      "  </div>",
      ")"
    ],
    "description": "Creates and exports a React Functional Component"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "const ${1:name} ({ ${2:propName}, ${3:restProps} }) => (",
      "  $0",
      ")"
    ],
    "description": "Creates a React Functional Component"
  }
  /* Node.js
  */
  /* Js
  */
  /* Misc
  */
  /* js tests
  */
  // "t.pass()": {
  // 	"prefix": "t.pass",
  // 	"body": "t.pass(${1:'${2:message}'});",
  // 	"description": "Passing assertion"
  // },
  // "t.fail()": {
  // 	"prefix": "t.fail",
  // 	"body": "t.fail(${1:'${2:message}'});",
  // 	"description": "Failing assertion"
  // },
  // "t.truthy()": {
  // 	"prefix": "t.truthy",
  // 	"body": "t.truthy(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is truthy"
  // },
  // "t.falsy()": {
  // 	"prefix": "t.falsy",
  // 	"body": "t.falsy(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is falsy"
  // },
  // "t.true()": {
  // 	"prefix": "t.true",
  // 	"body": "t.true(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is `true`"
  // },
  // "t.false()": {
  // 	"prefix": "t.false",
  // 	"body": "t.false(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is `false`"
  // },
  // "t.is()": {
  // 	"prefix": "t.is",
  // 	"body": "t.is(${1:value}, ${2:expected}${3:, '${4:message}'});",
  // 	"description": "Assert that `value` is equal to `expected`"
  // },
  // "t.not()": {
  // 	"prefix": "t.not",
  // 	"body": "t.not(${1:value}, ${2:expected}${3:, '${4:message}'});",
  // 	"description": "Assert that `value` is not equal to `expected`"
  // },
  // "t.deepEqual()": {
  // 	"prefix": "t.deepEqual",
  // 	"body": "t.deepEqual(${1:value}, ${2:expected}${3:, '${4:message}'});",
  // 	"description": "Assert that `value` is deep equal to `expected`"
  // },
  // "t.notDeepEqual()": {
  //   "prefix": "t.notDeepEqual",
  //   "body": "t.notDeepEqual(${1:value}, ${2:expected}${3:, '${4:message}'});",
  //   "description": "Assert that `value` is not deep equal to `expected`"
  // }
  // "t.throws()": {
  // 	"prefix": "t.throws",
  // 	"body": "t.throws(${1:function|promise}${2:, ${3:expected}${4:, '${5:message}'}});",
  // 	"description": "Assert that `function` throws an error or `promise` rejects"
  // },
  // "t.notThrows()": {
  // 	"prefix": "t.notThrows",
  // 	"body": "t.notThrows(${1:function|promise}${2:, '${3:message}'});",
  // 	"description": "Assert that `function` doesn't throw an error or `promise` rejects"
  // },
  // "t.regex()": {
  // 	"prefix": "t.regex",
  // 	"body": "t.regex(${1:contents}, ${2:regex}${3:, '${4:message}'});",
  // 	"description": "Assert that `contents` matches `regex`"
  // },
  // "t.notRegex()": {
  // 	"prefix": "t.notRegex",
  // 	"body": "t.notRegex(${1:contents}, ${2:regex}${3:, '${4:message}'});",
  // 	"description": "Assert that contents does not match regex"
  // },
  // "t.ifError()": {
  // 	"prefix": "t.ifError",
  // 	"body": "t.ifError(${1:error}${2:, '${3:message}'});",
  // 	"description": "Assert that `error` is falsy"
  // }
  // "ava": {
  // 	"prefix": "ava",
  // 	"body": [
  // 		"import test from 'ava';",
  // 		"import $1 from '$2';",
  // 		"",
  // 		"test('${3:title}', t => {",
  // 		"\tt.is($1(), '$4');",
  // 		"});"
  // 	],
  // 	"description": "AVA"
  // },
  // "import-ava": {
  // 	"prefix": "import-ava",
  // 	"body": "import test from 'ava';\n",
  // 	"description": "Import AVA"
  // },
  // "test": {
  // 	"prefix": "test",
  // 	"body": [
  // 		"test('${1:title}', t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Test"
  // },
  // "test-async": {
  // 	"prefix": "test-async",
  // 	"body": [
  // 		"test('${1:title}', async t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Test - Async"
  // },
  // "test-serial": {
  // 	"prefix": "test-serial",
  // 	"body": [
  // 		"test.serial('${1:title}', t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Test - Serial"
  // },
  // "test-cb": {
  // 	"prefix": "test-cb",
  // 	"body": [
  // 		"test.cb('${1:title}', t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Test - Cb"
  // },
  // "test-only": {
  // 	"prefix": "test-only",
  // 	"body": [
  // 		"test.only('${1:title}', t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Test - Only"
  // },
  // "test-skip": {
  // 	"prefix": "test-skip",
  // 	"body": [
  // 		"test.skip('${1:title}', t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Test - Skip"
  // },
  // "test-todo": {
  // 	"prefix": "test-todo",
  // 	"body": "test.todo('${1:title}');",
  // 	"description": "Test - Todo"
  // },
  // "test-failing": {
  // 	"prefix": "test-failing",
  // 	"body": [
  // 		"test.failing('${1:title}', t => {",
  // 		"\t$2",
  // 		"}"
  // 	],
  // 	"description": "Test - Failing"
  // },
  // "before-hook": {
  // 	"prefix": "before-hook",
  // 	"body": [
  // 		"test.before(t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Before hook"
  // },
  // "after-hook": {
  // 	"prefix": "after-hook",
  // 	"body": [
  // 		"test.after(t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "After hook"
  // },
  // "before-each-hook": {
  // 	"prefix": "before-each-hook",
  // 	"body": [
  // 		"test.beforeEach(t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "Before each hook"
  // },
  // "after-each-hook": {
  // 	"prefix": "after-each-hook",
  // 	"body": [
  // 		"test.afterEach(t => {",
  // 		"\t$2",
  // 		"});"
  // 	],
  // 	"description": "After each hook"
  // }
  // "testAsyncCallback": {
  //   "prefix": "tasca",
  //   "body": [
  //     "test('the data is peanut butter', (done) => {",
  //     "\tfunction callback(data){",
  //     "\t\texpect(data).toBe('peanut butter');",
  //     "\t\tdone();",
  //     "\t}fetchData(callback);",
  //     "})"
  //   ]
  // },
  // "testAsyncPromise": {
  //   "prefix": "taspr",
  //   "body": [
  //     "test('the data is peanut butter', () => {",
  //     "\treturn fetchData().then((data) => {",
  //     "\t\texpect(data).toBe('peanut butter');",
  //     "\t});",
  //     "})"
  //   ]
  // },
  // "testAsyncAwait": {
  //   "prefix": "tasaw",
  //   "body": [
  //     "test('the data is peanut butter', async () => {",
  //     "\tlet data = await fetchData();",
  //     "\texpect(data).toBe('peanut butter');",
  //     "})"
  //   ]
  // },
  // "testSnapShot": {
  //   "prefix": "tsnsh",
  //   "body": [
  //     "import React from 'react';",
  //     "import Link from '../Link.react';",
  //     "import renderer from 'react-test-renderer';",
  //     "",
  //     "it('renders correctly', () => {",
  //     "\tconst tree = renderer.create(",
  //     "\t\t<Link page='http://www.facebook.com'>Facebook</Link>",
  //     "\t).toJSON();",
  //     "\texpect(tree).toMatchSnapshot();",
  //     "});"
  //   ],
  //   "description": "Snapshot Testing with Jest"
  // },
  // "testShallowRenderer": {
  //   "prefix": "tshre",
  //   "body": [
  //     "//__tests__/CheckboxWithLabel-test.js",
  //     "import React from 'react';",
  //     "import { shallow } from 'enzyme';",
  //     "import CheckboxWithLabel from '../CheckboxWithLabel';",
  //     "test('Checkbox With Label changes the text after click', () => {",
  //     "\t// Render a checkbox with label in the document",
  //     "\tconst checkbox=shallow(",
  //     "\t\t<CheckboxWithLabel labelOn='On' labelOff='Off' />",
  //     "\t);",
  //     "\texpect(checkbox.text()).toEqual('Off');",
  //     "\tcheckbox.find('input').simulate('change');",
  //     "\texpect(checkbox.text()).toEqual('On');",
  //     "});"
  //   ],
  //   "description": "Enzyme Shallow Renderer with Jest"
  // },
}
