{
  "function": {
    "prefix": "f",
    "body": ["const ${1:name} = ({ ${2:arguments} }) => ($0)"]
  },
  "function - arrow unnamed": {
    "prefix": "fa",
    "body": ["({${1:arguments}}) => {", "  $0", "  return ", "}"]
  },
  "function - named": {
    "prefix": "fn",
    "body": [
      "function ${1:name}({ ${2:arguments} }) {",
      "  $0",
      "  return ",
      "}"
    ]
  },
  "function - async": {
    "prefix": "fas",
    "body": [
      "async function ${1:name}({ ${2:arguments} }) {",
      "  $0",
      "  return ",
      "}"
    ]
  },
  "async arrow function": {
    "prefix": "faa",
    "body": ["async ({${1:arguments}}) => {", "  $0", "  return ", "}"]
  },
  "function - generator": {
    "prefix": "fg",
    "body": ["function* ${1:name}({ ${2:arguments} }) {", "  $0", "}"]
  },
  "function - iife": {
    "prefix": "fii",
    "body": ["(function (${1:arguments}) {", "  $0", "})(${2})"]
  },
  "function apply": {
    "prefix": "fap",
    "body": ["${1:fn}.apply(${2:this}, ${3:argsArray})"]
  },
  "function call": {
    "prefix": "fc",
    "body": ["${1:fn}.call(${2:this}, ${3:arg, arg,...})"]
  },
  "function bind": {
    "prefix": "fb",
    "body": ["${1:fn}.bind(${2:this}, ${3:argsArray})"]
  },
  "flow type checking": {
    "prefix": "fl",
    "body": ["// @flow"]
  },
  "array.forEach": {
    "prefix": "afe",
    "body": [
      "${1:iterable}.forEach((${2:item}) => {",
      "  $0",
      "  return $3",
      "})"
    ]
  },
  "array.map": {
    "prefix": "am",
    "body": ["${1:iterable}.map((${2:item}) => {", "  $0", "  return $3", "})"]
  },
  "array.reduce": {
    "prefix": "ar",
    "body": [
      "${1:iterable}.reduce((${2:accumulator}, ${3:current}) => {",
      "  $0",
      "  return $5",
      "}, ${4:initValue})"
    ]
  },
  "array.filter": {
    "prefix": "af",
    "body": "${1:iterable}.filter((${2:item}) => $0)"
  },
  "array.find": {
    "prefix": "afi",
    "body": "${1:iterable}.find((${2:item}) => $0)"
  },
  "array.every": {
    "prefix": "ae",
    "body": "${1:iterable}.every((${2:item}) => $0)"
  },
  "array.some": {
    "prefix": "as",
    "body": "${1:iterable}.some((${2:item}) => $0)"
  },
  "let statement": {
    "prefix": "l",
    "body": "let ${1:name} = ${2:value}"
  },
  "const statement": {
    "prefix": "c",
    "body": "const ${1:name} = ${2:value}"
  },
  "const statement from destructuring": {
    "prefix": "cd",
    "body": ["const {${1:name} , $0} = ${2:object}"]
  },
  "const assignment awaited": {
    "prefix": "ca",
    "body": "const ${1:name} = await ${2:function}"
  },
  "const assignment yielded": {
    "prefix": "cy",
    "body": "const ${1:name} = yield ${2:value}"
  },
  "class extends": {
    "prefix": "clx",
    "body":
      "class ${1:name} extends ${2:base} {\n  constructor (${3:arguments}) {\n    super(${3:arguments})\n    $0\n  }\n}"
  },
  "export module": {
    "prefix": "e",
    "body": "export "
  },
  "export module default": {
    "prefix": "ed",
    "body": "export default "
  },
  "exports - CommonJS member": {
    "prefix": "ecm",
    "body": "exports.${1:member} = ${2:value}"
  },
  "exports - CommonJS": {
    "prefix": "em",
    "body": "module.exports = ${1:name}"
  },
  "import module destructured": {
    "prefix": "im",
    "body": "import {$2} from '${1:module}';$0"
  },
  "import - require": {
    "prefix": "imr",
    "body": "const { ${2:module} } = require('${1:module}')"
  },
  "setTimeout": {
    "prefix": "st",
    "body": "setTimeout(() => {\n  $0\n  return $3\n}, ${1:delay})"
  },
  "setInterval": {
    "prefix": "si",
    "body": "setInterval(() => {\n  $0\n  return $3\n}, ${1:delay})"
  },
  "setImmediate": {
    "prefix": "sim",
    "body": "setImmediate(() => {\n  $0\n})"
  },
  "reducer small": {
    "prefix": "rducS",
    "body": [
      "export const ${1: name } = (state = ${3:initialState} , action = {}) =>",
      "  action.type === ${2:TYPE} ? action.payload.$1 : state;$0"
    ],
    "description": "Uses one type "
  },
  "reducer medium": {
    "prefix": "rducM",
    "body": [
      "export default (state = ${1:initialState} , action = {}) => {",
      "  switch (action.type) {",
      "    case '${3: TYPE }':",
      "      return $5;",
      "    case '${4: TYPE }':",
      "      return $6;$0",
      "    default:",
      "      return state;",
      "  }",
      "};"
    ],
    "description": "Uses 2+ types via switch "
  },
  "redux mapState": {
    "prefix": "mapState",
    "body": [
      "const mapState = ({ ${1: prop } ,$0 ...state }) => ({",
      "  $1,",
      "});"
    ],
    "description": "A Redux mapState function"
  },
  "redux mapDispatch": {
    "prefix": "mapDispatch",
    "body": [
      "const mapDispatch = (dispatch, ownProps) => {",
      "  return {",
      "    ${1:dispatch}: () => {",
      "      dispatch(${2:actionCreator})",
      "    }",
      "  }",
      "}"
    ],
    "description": "A Redux mapDispatch function"
  },
  "redux connect": {
    "prefix": "cont",
    "body": ["export default $0connect(mapState, mapDispatch)(${1:component})"],
    "description": "A Redux connect function"
  },
  "reactImport": {
    "prefix": "irc",
    "body": ["import React, {Component} from 'react'", ""],
    "description": "Import React Component"
  },
  "reactFunctionalExportComponent": {
    "prefix": "rfe",
    "body": [
      "import React from 'react'",
      "",
      "export default ({ ${1:name}, $2 }) => (",
      "  <div>",
      "    $0",
      "  </div>",
      ")"
    ],
    "description": "Creates and exports a React Functional Component"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "const ${1:name} ({ ${2:propName}, ${3:restProps} }) => (",
      "  $0",
      ")"
    ],
    "description": "Creates a React Functional Component"
  },
  "reactClassComponent": {
    "prefix": "rcc",
    "body": [
      "class ${1:name} extends Component {",
      "  state = ${2:initialLocalState}",
      "  ${6:lifeCycleMethods}",
      "  ",
      "  ${3:method} = () => {$4}",
      "  ",
      "  render() {",
      "    ",
      "    return $5",
      "  }",
      "}"
    ],
    "description": "Creates a React Class Component"
  },
  "reactClassLogs": {
    "prefix": "rcl",
    "body": [
      "constructor(props) {",
      "  super(props);",
      "  console.log({ props });",
      "}",
      "<Text>{JSON.stringify(this.props, null, 2)}</Text>"
    ],
    "description": "Logs for React class"
  },
  "Node - event handler": {
    "prefix": "ne",
    "body": "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n  $0\n})"
  },
  "DOM - event cancel": {
    "prefix": "dec",
    "body": "ev.preventDefault()\nev.stopPropagation()$0"
  },
  "DOM - addEventListener": {
    "prefix": "dae",
    "body": "${1:document}.addEventListener('${2:event}', (ev) => {\n  $0\n})"
  },
  "DOM - removeEventListener": {
    "prefix": "dre",
    "body": "${1:document}.removeEventListener('${2:event}', ${3:listener})"
  },
  "DOM - getElementById": {
    "prefix": "dgi",
    "body": "${1:document}.getElementById('${2:id}')"
  },
  "DOM - getElementsByClassName": {
    "prefix": "dgc",
    "body": "Array.from(${1:document}.getElementsByClassName('${2:class}'))"
  },
  "DOM - getElementsByTagName": {
    "prefix": "dgt",
    "body": "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"
  },
  "DOM - querySelector": {
    "prefix": "ds",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "DOM - querySelectorAll": {
    "prefix": "dsa",
    "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "DOM - createDocumentFragment": {
    "prefix": "dcf",
    "body": "${1:document}.createDocumentFragment(${2:elem})"
  },
  "DOM - createElement": {
    "prefix": "dce",
    "body": "${1:document}.createElement(${2:elem})"
  },
  "DOM - classList.add": {
    "prefix": "dca",
    "body": "${1:el}.classList.add('${2:class}')"
  },
  "DOM - classList.remove": {
    "prefix": "dcr",
    "body": "${1:el}.classList.remove('${2:class}')"
  },
  "DOM - classList.toggle": {
    "prefix": "dct",
    "body": "${1:el}.classList.toggle('${2:class}')"
  },
  "DOM - getAttribute": {
    "prefix": "dga",
    "body": "${1:el}.getAttribute('${2:attr}')"
  },
  "DOM - removeAttribute": {
    "prefix": "dra",
    "body": "${1:el}.removeAttribute('${2:attr}')"
  },
  "DOM - setAttribute": {
    "prefix": "dsa",
    "body": "${1:el}.setAttribute('${2:attr}', ${3:value})"
  },
  "DOM - appendChild": {
    "prefix": "dac",
    "body": "${1:el}.appendChild(${2:elem})"
  },
  "DOM - removeChild": {
    "prefix": "drc",
    "body": "${1:el}.removeChild(${2:elem})"
  },
  "utils - typeof": {
    "prefix": "ut",
    "body": "typeof ${1:source} ==$0 '${2:undefined}'"
  },
  "utils - instanceof": {
    "prefix": "uinstaof",
    "body": "${1:source} instanceof ${2:Object}"
  },
  "utils - Array.isArray()": {
    "prefix": "uia",
    "body": "Array.isArray(${1:source})"
  },
  "utils - if statement": {
    "prefix": "uif",
    "body": "if (${1:condition}) {\n  $0\n}"
  },
  "utils - for of loop": {
    "prefix": "uf",
    "body": "for (let ${1:key} of ${2:source}) {\n  $0\n}"
  },
  "utils - while iteration decrease": {
    "prefix": "uwd",
    "body": "while (${1:array}.lengh--) {\n  $0\n}"
  },
  "utils - while loop": {
    "prefix": "uw",
    "body": "while (${1:condition}) {\n  $0\n}"
  },
  "utils - throw new Error": {
    "prefix": "ute",
    "body": "throw new $0Error('$1')"
  },
  "utils - try/catch": {
    "prefix": "utc",
    "body": "try {\n  $0\n} \ncatch (err) => {}"
  },
  "utils - try/finally": {
    "prefix": "utf",
    "body": "finally {}"
  },
  "utils - console.log": {
    "prefix": "ucl",
    "body": "console.log($0)"
  },
  "utils - console.error": {
    "prefix": "uce",
    "body": "console.error($0)"
  },
  "utils - console.warn": {
    "prefix": "ucw",
    "body": "console.warn($0)"
  },
  "utils - console.dir": {
    "prefix": "ucd",
    "body": "console.dir($0)"
  },
  "utils - constructor": {
    "prefix": "uCtor",
    "body": "constructor ( { ${1:props} } ) {\n  $0\n}"
  },
  "utils - use strict": {
    "prefix": "us",
    "body": "'use strict';"
  },
  "utils - JSON.stringify()": {
    "prefix": "us",
    "body": "JSON.stringify($0)"
  },
  "utils - JSON.parse()": {
    "prefix": "up",
    "body": "JSON.parse($0)"
  },
  "utils - method": {
    "prefix": "um",
    "body": "${1:method} (${2:arguments}) {\n  $0\n}"
  },
  "utils - getter": {
    "prefix": "ug",
    "body": "get ${1:property} () {\n  $0\n}"
  },
  "utils - setter": {
    "prefix": "ust",
    "body": "set ${1:property} (${2:value}) {\n  $0\n}"
  },
  "utils - prototype method": {
    "prefix": "upro",
    "body":
      "${1:Class}.prototype.${2:method} = function (${3:arguments}) {\n  $0\n}"
  },
  "Object - Object.assign": {
    "prefix": "oa",
    "body": "Object.assign(${1:dest}, ${2:source})"
  },
  "Object - Object.create": {
    "prefix": "oc",
    "body": "Object.create(null$0)"
  },
  "Object - Object.hasOwnProperty": {
    "prefix": "ohOP",
    "body": "Object.hasOwnProperty(${1:obj}, '${2:prop}')"
  },
  "Object - Object.defineProperty": {
    "prefix": "odP",
    "body": "Object.defineProperty(${1:dest}, '${2:prop}', {\n  $0\n})"
  },
  "Object - Object.keys": {
    "prefix": "ok",
    "body": "Object.keys(${1:obj})"
  },
  "utils - section": {
    "prefix": "usc",
    "body": "/* 👨‍💻 >> ${1:Short section name} << */\n$0"
  },
  "utils - emoji": {
    "prefix": "uji",
    "body": "👨‍💻🛵🔸🔷⚙️🔜🃏🏁💯💖🎉🔖⌚️🏔️🏞️🌅🚀🎠🚤🚁🏄‍♂️🤸‍♂️⛷️🍾🔥⚡️✨🌟💥👇🤖"
  },
  "utils - return": {
    "prefix": "r",
    "body": "return $0"
  },
  "utils - yield": {
    "prefix": "y",
    "body": "yield $0"
  }
  // "t.pass()": {
  // 	"prefix": "t.pass",
  // 	"body": "t.pass(${1:'${2:message}'});",
  // 	"description": "Passing assertion"
  // },
  // "t.fail()": {
  // 	"prefix": "t.fail",
  // 	"body": "t.fail(${1:'${2:message}'});",
  // 	"description": "Failing assertion"
  // },
  // "t.truthy()": {
  // 	"prefix": "t.truthy",
  // 	"body": "t.truthy(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is truthy"
  // },
  // "t.falsy()": {
  // 	"prefix": "t.falsy",
  // 	"body": "t.falsy(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is falsy"
  // },
  // "t.true()": {
  // 	"prefix": "t.true",
  // 	"body": "t.true(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is `true`"
  // },
  // "t.false()": {
  // 	"prefix": "t.false",
  // 	"body": "t.false(${1:value}${2:, '${3:message}'});",
  // 	"description": "Assert that `value` is `false`"
  // },
  // "t.is()": {
  // 	"prefix": "t.is",
  // 	"body": "t.is(${1:value}, ${2:expected}${3:, '${4:message}'});",
  // 	"description": "Assert that `value` is equal to `expected`"
  // },
  // "t.not()": {
  // 	"prefix": "t.not",
  // 	"body": "t.not(${1:value}, ${2:expected}${3:, '${4:message}'});",
  // 	"description": "Assert that `value` is not equal to `expected`"
  // },
  // "t.deepEqual()": {
  // 	"prefix": "t.deepEqual",
  // 	"body": "t.deepEqual(${1:value}, ${2:expected}${3:, '${4:message}'});",
  // 	"description": "Assert that `value` is deep equal to `expected`"
  // },
  // "t.notDeepEqual()": {
  //   "prefix": "t.notDeepEqual",
  //   "body": "t.notDeepEqual(${1:value}, ${2:expected}${3:, '${4:message}'});",
  //   "description": "Assert that `value` is not deep equal to `expected`"
  // }
  // "t.throws()": {
  // 	"prefix": "t.throws",
  // 	"body": "t.throws(${1:function|promise}${2:, ${3:expected}${4:, '${5:message}'}});",
  // 	"description": "Assert that `function` throws an error or `promise` rejects"
  // },
  // "t.notThrows()": {
  // 	"prefix": "t.notThrows",
  // 	"body": "t.notThrows(${1:function|promise}${2:, '${3:message}'});",
  // 	"description": "Assert that `function` doesn't throw an error or `promise` rejects"
  // },
  // "t.regex()": {
  // 	"prefix": "t.regex",
  // 	"body": "t.regex(${1:contents}, ${2:regex}${3:, '${4:message}'});",
  // 	"description": "Assert that `contents` matches `regex`"
  // },
  // "t.notRegex()": {
  // 	"prefix": "t.notRegex",
  // 	"body": "t.notRegex(${1:contents}, ${2:regex}${3:, '${4:message}'});",
  // 	"description": "Assert that contents does not match regex"
  // },
  // "t.ifError()": {
  // 	"prefix": "t.ifError",
  // 	"body": "t.ifError(${1:error}${2:, '${3:message}'});",
  // 	"description": "Assert that `error` is falsy"
  // }
  // "ava": {
  // 	"prefix": "ava",
  // 	"body": [
  // 		"import test from 'ava';",
  // 		"import $1 from '$2';",
  // 		"",
  // 		"test('${3:title}', t => {",
  // 		"  t.is($1(), '$4');",
  // 		"});"
  // 	],
  // 	"description": "AVA"
  // },
  // "import-ava": {
  // 	"prefix": "import-ava",
  // 	"body": "import test from 'ava';\n",
  // 	"description": "Import AVA"
  // },
  // "test": {
  // 	"prefix": "test",
  // 	"body": [
  // 		"test('${1:title}', t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Test"
  // },
  // "test-async": {
  // 	"prefix": "test-async",
  // 	"body": [
  // 		"test('${1:title}', async t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Test - Async"
  // },
  // "test-serial": {
  // 	"prefix": "test-serial",
  // 	"body": [
  // 		"test.serial('${1:title}', t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Test - Serial"
  // },
  // "test-cb": {
  // 	"prefix": "test-cb",
  // 	"body": [
  // 		"test.cb('${1:title}', t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Test - Cb"
  // },
  // "test-only": {
  // 	"prefix": "test-only",
  // 	"body": [
  // 		"test.only('${1:title}', t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Test - Only"
  // },
  // "test-skip": {
  // 	"prefix": "test-skip",
  // 	"body": [
  // 		"test.skip('${1:title}', t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Test - Skip"
  // },
  // "test-todo": {
  // 	"prefix": "test-todo",
  // 	"body": "test.todo('${1:title}');",
  // 	"description": "Test - Todo"
  // },
  // "test-failing": {
  // 	"prefix": "test-failing",
  // 	"body": [
  // 		"test.failing('${1:title}', t => {",
  // 		"  $2",
  // 		"}"
  // 	],
  // 	"description": "Test - Failing"
  // },
  // "before-hook": {
  // 	"prefix": "before-hook",
  // 	"body": [
  // 		"test.before(t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Before hook"
  // },
  // "after-hook": {
  // 	"prefix": "after-hook",
  // 	"body": [
  // 		"test.after(t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "After hook"
  // },
  // "before-each-hook": {
  // 	"prefix": "before-each-hook",
  // 	"body": [
  // 		"test.beforeEach(t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "Before each hook"
  // },
  // "after-each-hook": {
  // 	"prefix": "after-each-hook",
  // 	"body": [
  // 		"test.afterEach(t => {",
  // 		"  $2",
  // 		"});"
  // 	],
  // 	"description": "After each hook"
  // }
  // "testAsyncCallback": {
  //   "prefix": "tasca",
  //   "body": [
  //     "test('the data is peanut butter', (done) => {",
  //     "  function callback(data){",
  //     "    expect(data).toBe('peanut butter');",
  //     "    done();",
  //     "  }fetchData(callback);",
  //     "})"
  //   ]
  // },
  // "testAsyncPromise": {
  //   "prefix": "taspr",
  //   "body": [
  //     "test('the data is peanut butter', () => {",
  //     "  return fetchData().then((data) => {",
  //     "    expect(data).toBe('peanut butter');",
  //     "  });",
  //     "})"
  //   ]
  // },
  // "testAsyncAwait": {
  //   "prefix": "tasaw",
  //   "body": [
  //     "test('the data is peanut butter', async () => {",
  //     "  let data = await fetchData();",
  //     "  expect(data).toBe('peanut butter');",
  //     "})"
  //   ]
  // },
  // "testSnapShot": {
  //   "prefix": "tsnsh",
  //   "body": [
  //     "import React from 'react';",
  //     "import Link from '../Link.react';",
  //     "import renderer from 'react-test-renderer';",
  //     "",
  //     "it('renders correctly', () => {",
  //     "  const tree = renderer.create(",
  //     "    <Link page='http://www.facebook.com'>Facebook</Link>",
  //     "  ).toJSON();",
  //     "  expect(tree).toMatchSnapshot();",
  //     "});"
  //   ],
  //   "description": "Snapshot Testing with Jest"
  // },
  // "testShallowRenderer": {
  //   "prefix": "tshre",
  //   "body": [
  //     "//__tests__/CheckboxWithLabel-test.js",
  //     "import React from 'react';",
  //     "import { shallow } from 'enzyme';",
  //     "import CheckboxWithLabel from '../CheckboxWithLabel';",
  //     "test('Checkbox With Label changes the text after click', () => {",
  //     "  // Render a checkbox with label in the document",
  //     "  const checkbox=shallow(",
  //     "    <CheckboxWithLabel labelOn='On' labelOff='Off' />",
  //     "  );",
  //     "  expect(checkbox.text()).toEqual('Off');",
  //     "  checkbox.find('input').simulate('change');",
  //     "  expect(checkbox.text()).toEqual('On');",
  //     "});"
  //   ],
  //   "description": "Enzyme Shallow Renderer with Jest"
  // },
}
