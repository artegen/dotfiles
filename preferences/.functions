#!/bin/bash

# find shorthand
function f() {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# List all files, long format, colorized, permissions in octal
function la(){
 	ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}

mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
# md() { mkdir -p "$@" && cd "$@" }
trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash
ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview


#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit. Example: mans mplayer codec
mans () {
		man $1 | grep -iC2 --color=always $2 | less
}


# cd into whatever is the forefront Finder window.

#     cdf () {
#         currFolderPath=$( /usr/bin/osascript <<EOT
#             tell application "Finder"
#                 try
#             set currFolder to (folder of the front window as alias)
#                 on error
#             set currFolder to (path to desktop folder as alias)
#                 end try
#                 POSIX path of currFolder
#             end tell
# EOT
#         )
#         echo "cd to \"$currFolderPath\""
#         cd "$currFolderPath"
#     }

cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# `code` with no arguments opens the current directory in VS Code, otherwise
# opens the given location
function code() {
	if [ $# -eq 0 ]; then
		code .;
	else
		code "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# git commit browser. needs fzf
log() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}



# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/" &
 	# statikk is good because it won't expose hidden folders/files by default.
 	# yarn global add statikk
 	statikk --port "$port" .
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# direct it all to /dev/null
function nullify() {
  "$@" >/dev/null 2>&1
}

# visual studio code. a la `subl`
# function code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCodeInsiders" --args $*; }

# BASHPATH=$(brew --prefix)/bin/bash
# #sudo echo $BASHPATH >> /etc/shells
# sudo bash -c 'echo $(brew --prefix)/bin/bash >> /etc/shells'
# chsh -s $BASHPATH # will set for current user only.
# echo $BASH_VERSION # should be 4.x not the old 3.2.X

# `shellswitch [bash |zsh]`
#   Must be in /etc/shells
shell () {
	if ! fgrep -q $(brew --prefix)/bin/$1 /etc/shells;
		then echo '$(brew --prefix)/bin/$1' | sudo tee -a /etc/shells;
  		chsh -s $(brew --prefix)/bin/$1;
	fi;
}

# preview csv files. source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer
function csvpreview(){
      sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}





# get gzipped size
# function gz() {
# 	echo "orig size    (bytes): "
# 	cat "$1" | wc -c
# 	echo "gzipped size (bytes): "
# 	gzip -c "$1" | wc -c
# }

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Determine size of a file or total size of a directory
# function fs() {
# 	if du -b /dev/null > /dev/null 2>&1; then
# 		local arg=-sbh;
# 	else
# 		local arg=-sh;
# 	fi
# 	if [[ -n "$@" ]]; then
# 		du $arg -- "$@";
# 	else
# 		du $arg .[^.]* ./*;
# 	fi;
# }






# Create a data URL from a file
# function dataurl() {
# 	local mimeType=$(file -b --mime-type "$1");
# 	if [[ $mimeType == text/* ]]; then
# 		mimeType="${mimeType};charset=utf-8";
# 	fi
# 	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
# }

# # UTF-8-encode a string of Unicode symbols
# function escape() {
# 	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
# 	# print a newline unless weâ€™re piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }

# # Decode \x{ABCD}-style Unicode escape sequences
# function unidecode() {
# 	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
# 	# print a newline unless weâ€™re piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }

# Get a characterâ€™s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless weâ€™re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}â€¦";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
					# this is the best whois server
													# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

function localip(){
	function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
	export -f _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		sed -r "s/Device: (en.*)$/_localip \1/e" | \
		sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
		sed -r "s/(VLAN Configurations)|==*//g"
}

# # UTF-8-encode a string of Unicode symbols
# function escape() {
# 	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
# 	# print a newline unless weâ€™re piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }

# # Decode \x{ABCD}-style Unicode escape sequences
# function unidecode() {
# 	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
# 	# print a newline unless weâ€™re piping the output to another program
# 	if [ -t 1 ]; then
# 		echo ""; # newline
# 	fi;
# }


# who is using the laptop's iSight camera?
# camerausedby() {
# 	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
# 	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
# 	echo -e "Recent camera uses:\n$usedby"
# }


# # animated gifs from any video
# # from alex sexton   gist.github.com/SlexAxton/4989674
# gifify() {
#   if [[ -n "$1" ]]; then
# 	if [[ $2 == '--good' ]]; then
# 	  ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
# 	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
# 	  rm out-static*.png
# 	else
# 	  ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
# 	fi
#   else
# 	echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
#   fi
# }

# # turn that video into webm.
# # brew reinstall ffmpeg --with-libvpx
# webmify(){
# 	ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$2" "$1.webm"
# }

# }



# Gets password from OS X Keychain.
# $ get-pass github
# function get-pass() {
#   keychain="$HOME/Library/Keychains/login.keychain"
#   security -q find-generic-password -g -l $@ $keychain 2>&1 |\
#     awk -F\" '/password:/ {print $2}';
# }


# $ git log --no-merges --pretty=format:"%ae" | stats
# # => 514 a@example.com
# # => 200 b@example.com
function stats() {
  sort | uniq -c | sort -r
}


# #   ---------------------------
# #   5.  PROCESS MANAGEMENT
# #   ---------------------------

# #   findPid: find out the pid of a specified process
# #   -----------------------------------------------------
# #       Note that the command name can be specified via a regex
# #       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
# #       Without the 'sudo' it will only find processes of the current user
# #   -----------------------------------------------------
#     findPid () { lsof -t -c "$@" ; }

# #   memHogsTop, memHogsPs:  Find memory hogs
# #   -----------------------------------------------------
#     alias memHogsTop='top -l 1 -o rsize | head -20'
#     alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

# #   cpuHogs:  Find CPU hogs
# #   -----------------------------------------------------
#     alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

# #   topForever:  Continual 'top' listing (every 10 seconds)
# #   -----------------------------------------------------
#     alias topForever='top -l 9999999 -s 10 -o cpu'

# #   ttop:  Recommended 'top' invocation to minimize resources
# #   ------------------------------------------------------------
# #       Taken from this macosxhints article
# #       http://www.macosxhints.com/article.php?story=20060816123853639
# #   ------------------------------------------------------------
#     alias ttop="top -R -F -s 10 -o rsize"

# #   my_ps: List processes owned by my user:
# #   ------------------------------------------------------------
#     my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


# #   ---------------------------
# #   6.  NETWORKING
# #   ---------------------------

# alias myip='curl ip.appspot.com'                    # myip:         Public facing IP Address
# alias netCons='lsof -i'                             # netCons:      Show all open TCP/IP sockets
# alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
# alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
# alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
# alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
# alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
# alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
# alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
# alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

# #   ii:  display useful host related informaton
# #   -------------------------------------------------------------------
#     ii() {
#         echo -e "\nYou are logged on ${RED}$HOST"
#         echo -e "\nAdditionnal information:$NC " ; uname -a
#         echo -e "\n${RED}Users logged on:$NC " ; w -h
#         echo -e "\n${RED}Current date :$NC " ; date
#         echo -e "\n${RED}Machine stats :$NC " ; uptime
#         echo -e "\n${RED}Current network location :$NC " ; scselect
#         echo -e "\n${RED}Public facing IP Address :$NC " ;myip
#         #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
#         echo
#     }

# #   ---------------------------------------
# #   8.  WEB DEVELOPMENT
# #   ---------------------------------------

# alias apacheEdit='sudo edit /etc/httpd/httpd.conf'      # apacheEdit:       Edit httpd.conf
# alias apacheRestart='sudo apachectl graceful'           # apacheRestart:    Restart Apache
# alias editHosts='sudo edit /etc/hosts'                  # editHosts:        Edit /etc/hosts file
# alias herr='tail /var/log/httpd/error_log'              # herr:             Tails HTTP error logs
# alias apacheLogs="less +F /var/log/apache2/error_log"   # Apachelogs:   Shows apache error logs
# httpHeaders () { /usr/bin/curl -I -L $@ ; }             # httpHeaders:      Grabs headers from web page

# #   httpDebug:  Download a web page and show info on what took time
# #   -------------------------------------------------------------------
#     httpDebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }




# listing all useragent from your logs
# zcat ~/path/to/access/logs* | awk -F'"' '{print $6}' | sort | uniq -c | sort -rn | head -n20000
# zcat logs/paulirish.com/http/access.log* | awk -F'"' '{print $6}' | sort | uniq -c | sort -rn | head -n20000 | less

### rsync
# rsync -havz --progress --partial --append-verify login@host:/full/path ./
