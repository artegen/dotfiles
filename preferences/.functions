#!/usr/bin/env bash
# open current or specified directory
function e() {
	if [ "$1" = "" ]; then
		exec "$EDITOR" .
	else
		exec "$EDITOR" "$1"
	fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo "" # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
		openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" |
			openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")
		echo "Common Name:"
		echo "" # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
		echo "" # newline
		echo "Subject Alternative Name(s):"
		echo "" # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
			sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`"
		return 1
	fi
	curl -i https://git.io/ -F "url=${2}" -F "code=${1}"
}

ql() { qlmanage -p "$*" >&/dev/null; } # Opens any file in MacOS Quicklook Preview

function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ]; then
		domain=$1
	fi
	echo "Getting whois record for: $domain …"

	# avoid recursion
	# this is the best whois server
	# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

# Gets password from OS X Keychain.
# $ get-pass github
function get-pass() {
	keychain="$HOME/Library/Keychains/login.keychain"
	security -q find-generic-password -g -l "$@" "$keychain" 2>&1 |
		awk -F\" '/password:/ {print $2}'
}

#the command name can be specified via a regex
#E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#Without the 'sudo' it will only find processes of the current user
findPid() { lsof -t -c "$@"; }

my_ps() { ps "$@" -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command; } # owned by current user

function start_ssh_agent() {
	SSH_ENV="$HOME/.ssh/environment"
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' >"${SSH_ENV}"
	chmod 600 "${SSH_ENV}"
	. "${SSH_ENV}" >/dev/null
}

function ec2list() {
	aws ec2 describe-instances \
		--filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=$1" \
		--query 'Reservations[].Instances[].[Tags[?Key==`Name`] | [0].Value,PublicDnsName] | sort_by(@, &[0])' \
		--output text
}
